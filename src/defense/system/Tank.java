/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package defense.system;

import defense.system.Observer.Observable;
import defense.system.Observer.Observer;
import defense.system.Observer.Slider;
import java.awt.Color;
import java.awt.Image;
import javax.swing.ImageIcon;

/**
 *
 * @author User
 */
public class Tank extends javax.swing.JFrame implements Observer{

    /**
     * Creates new form Tank
     */
    private final Observable observable;
    private final MainController m1;
    
    public Tank() {
        this.observable=Observable.getInstance();
        this.m1=MainController.getInstance();
        initComponents();
        setTitle("Tank");
        setLocation(700,3);
        Image icon = new ImageIcon(this.getClass().getResource("/img/Tank.png")).getImage();
        this.setIconImage(icon);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        btnShoot = new javax.swing.JButton();
        btnMissile = new javax.swing.JButton();
        btnReader = new javax.swing.JButton();
        btnRotate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chckPosition = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSlider1 = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        TankjTextArea = new javax.swing.JTextArea();
        txtTank = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        AreaClearjLabel1 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnShoot.setText("Shoot");
        btnShoot.setEnabled(false);
        btnShoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShootActionPerformed(evt);
            }
        });

        btnMissile.setText("Missile Operation");
        btnMissile.setEnabled(false);
        btnMissile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMissileActionPerformed(evt);
            }
        });

        btnReader.setText("Reader Operation");
        btnReader.setEnabled(false);
        btnReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReaderActionPerformed(evt);
            }
        });

        btnRotate.setText("Rotate Shooting");
        btnRotate.setEnabled(false);
        btnRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRotateActionPerformed(evt);
            }
        });

        jLabel1.setText("Soldier Count");

        jLabel2.setText("Ammo Count");

        chckPosition.setText("Position");
        chckPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckPositionActionPerformed(evt);
            }
        });

        jSpinner1.setValue(7);

        jSpinner2.setValue(10000);

        jSlider1.setMajorTickSpacing(20);
        jSlider1.setMinorTickSpacing(10);
        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);

        TankjTextArea.setColumns(20);
        TankjTextArea.setRows(5);
        TankjTextArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TankjTextArea.setEnabled(false);
        jScrollPane1.setViewportView(TankjTextArea);

        txtTank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTankActionPerformed(evt);
            }
        });

        jButton5.setText("Send");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        AreaClearjLabel1.setForeground(new java.awt.Color(255, 0, 0));
        AreaClearjLabel1.setText("Area Not Cleared ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnReader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnShoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRotate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnMissile, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(AreaClearjLabel1)))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(chckPosition))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtTank, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnRotate)
                                    .addComponent(chckPosition)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AreaClearjLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnShoot)
                                    .addComponent(btnMissile))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnReader)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShootActionPerformed
       int currentAmmoCount = (int) jSpinner2.getValue();
            if (currentAmmoCount > 0) {
                jSpinner2.setValue(currentAmmoCount - 1);
             } else {
                btnShoot.setEnabled(false);
             } 
    }//GEN-LAST:event_btnShootActionPerformed

    private void btnRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRotateActionPerformed
        int currentAmmoCount = (int) jSpinner2.getValue();
            if (currentAmmoCount > 0) {
                jSpinner2.setValue(currentAmmoCount - 1);
             } else {
                btnRotate.setEnabled(false);
             }
    }//GEN-LAST:event_btnRotateActionPerformed

    private void btnMissileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMissileActionPerformed
         int currentAmmoCount = (int) jSpinner2.getValue();
            if (currentAmmoCount > 0) {
                jSpinner2.setValue(currentAmmoCount - 1);
             } else {
                btnMissile.setEnabled(false);
             }
    }//GEN-LAST:event_btnMissileActionPerformed

    private void btnReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReaderActionPerformed
        int currentAmmoCount = (int) jSpinner2.getValue();
            if (currentAmmoCount > 0) {
                jSpinner2.setValue(currentAmmoCount - 1);
             } else {
                btnReader.setEnabled(false);
             }
    }//GEN-LAST:event_btnReaderActionPerformed

    private void chckPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chckPositionActionPerformed

    private void txtTankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTankActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTankActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        m1.setMassage("Tank : "+txtTank.getText()) ;      
        txtTank.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AreaClearjLabel1;
    private javax.swing.JTextArea TankjTextArea;
    private javax.swing.JButton btnMissile;
    private javax.swing.JButton btnReader;
    private javax.swing.JButton btnRotate;
    private javax.swing.JButton btnShoot;
    private javax.swing.JCheckBox chckPosition;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextField txtTank;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setValue(String value) {
        if(value.equals("Area Cleared")){
            AreaClearjLabel1.setText(value);
            AreaClearjLabel1.setForeground(Color.BLACK);
        }else{
             AreaClearjLabel1.setText(value);
            AreaClearjLabel1.setForeground(Color.RED);
        }
    }


    @Override
    public void setMessage(String message) {
         if(message!=null){
        TankjTextArea.append(message+"\n");
         }
    }

    @Override
    public void setPrivate(String message, int index ) {
        if(index==2){
        TankjTextArea.append(message+"\n");
        }
    }

    @Override
    public void Strength(int strength) {
        Slider sliderValue = Slider.values()[strength];
        if (chckPosition.isSelected()) {
        switch (sliderValue) {
                case LOW:
                    btnShoot.setEnabled(false);
                    btnMissile.setEnabled(false);
                    btnReader.setEnabled(false);
                    btnRotate.setEnabled(false);
                    break;
                case MEDIUM:
                    btnShoot.setEnabled(true);
                    btnMissile.setEnabled(false);
                    btnReader.setEnabled(false);
                    btnRotate.setEnabled(false);
                    break;
                case HIGH:
                    btnShoot.setEnabled(true);
                    btnMissile.setEnabled(true);
                    btnReader.setEnabled(false);
                    btnRotate.setEnabled(false);
                    break;
                case STRONG:
                    btnShoot.setEnabled(true);
                    btnMissile.setEnabled(true);
                    btnReader.setEnabled(true);
                    btnRotate.setEnabled(true);
                    break;
                case COLOSED:
                default:
                    btnShoot.setEnabled(false);
                    btnMissile.setEnabled(false);
                    btnReader.setEnabled(false);
                    btnRotate.setEnabled(false);
                    break;
            }
        } else {
            btnShoot.setEnabled(false);
            btnMissile.setEnabled(false);
            btnReader.setEnabled(false);
            btnRotate.setEnabled(false);
        }
    }

    @Override
    public String[] setCount() {
        String[] ar ={jSpinner1.getValue().toString(),jSpinner2.getValue().toString(),Integer.toString(jSlider1.getValue())};
        return ar;
    }

 }

