/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package defense.system;

import defense.system.Observer.Observable;
import defense.system.Observer.Observer;
import defense.system.Observer.Slider;
import java.awt.Color;
import java.awt.Image;
import javax.swing.ImageIcon;

/**
 *
 * @author User
 */
public class Helicopter extends javax.swing.JFrame implements Observer{

   //private Observable observable;
    /**
     * Creates new form Helicopter
     * 
     */
    private final Observable observable;
    private final MainController m1;
    public Helicopter() {
        this.observable=Observable.getInstance();
        this.m1=MainController.getInstance();
        initComponents();
        setTitle("Helicopter");
        setLocation(40,3);
        Image icon = new ImageIcon(this.getClass().getResource("/img/Helicopter.png")).getImage();
        this.setIconImage(icon);
        setVisible(true);
    }

    
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnShoot = new javax.swing.JButton();
        btnMissileOperation = new javax.swing.JButton();
        btnLaserOperation = new javax.swing.JButton();
        soldierCount = new javax.swing.JLabel();
        ammoCount = new javax.swing.JLabel();
        soldierCountSpinner = new javax.swing.JSpinner();
        ammoCountSpinner = new javax.swing.JSpinner();
        chckPosition = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaHelicopter = new javax.swing.JTextArea();
        txtHelicopter = new javax.swing.JTextField();
        jSlider2 = new javax.swing.JSlider();
        btnHelicopterSend = new javax.swing.JButton();
        AreaClearjLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnShoot.setText("Shoot");
        btnShoot.setEnabled(false);
        btnShoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShootActionPerformed(evt);
            }
        });

        btnMissileOperation.setText("Missile Operation");
        btnMissileOperation.setEnabled(false);
        btnMissileOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMissileOperationActionPerformed(evt);
            }
        });

        btnLaserOperation.setText("Laser Operation");
        btnLaserOperation.setEnabled(false);
        btnLaserOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaserOperationActionPerformed(evt);
            }
        });

        soldierCount.setText("Soldier Count");

        ammoCount.setText("Ammo Count");

        soldierCountSpinner.setValue(5);
        soldierCountSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                soldierCountSpinnerStateChanged(evt);
            }
        });

        ammoCountSpinner.setValue(10000);
        ammoCountSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ammoCountSpinnerStateChanged(evt);
            }
        });

        chckPosition.setText("Position");
        chckPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckPositionActionPerformed(evt);
            }
        });

        txtAreaHelicopter.setColumns(20);
        txtAreaHelicopter.setRows(5);
        txtAreaHelicopter.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAreaHelicopter.setEnabled(false);
        jScrollPane1.setViewportView(txtAreaHelicopter);

        jSlider2.setMajorTickSpacing(20);
        jSlider2.setMinorTickSpacing(10);
        jSlider2.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider2.setPaintLabels(true);
        jSlider2.setPaintTicks(true);

        btnHelicopterSend.setText("Send");
        btnHelicopterSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelicopterSendActionPerformed(evt);
            }
        });

        AreaClearjLabel1.setForeground(new java.awt.Color(255, 51, 51));
        AreaClearjLabel1.setText("Area Not Cleared ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtHelicopter, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnHelicopterSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnLaserOperation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnShoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnMissileOperation)
                                        .addGap(37, 37, 37)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(soldierCount)
                                            .addComponent(ammoCount)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chckPosition)
                                        .addGap(3, 3, 3))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(AreaClearjLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(ammoCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(soldierCountSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AreaClearjLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 6, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(soldierCount)
                                    .addComponent(soldierCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnShoot)
                                    .addComponent(btnMissileOperation)
                                    .addComponent(ammoCount)
                                    .addComponent(ammoCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnLaserOperation)
                                    .addComponent(chckPosition))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtHelicopter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnHelicopterSend)))
                            .addComponent(jSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShootActionPerformed
       int currentAmmoCount = (int) ammoCountSpinner.getValue();
            if (currentAmmoCount > 0) {
                ammoCountSpinner.setValue(currentAmmoCount - 1);
             } else {
                btnShoot.setEnabled(false);
             }      
    }//GEN-LAST:event_btnShootActionPerformed

    private void btnLaserOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaserOperationActionPerformed
        int currentAmmoCount = (int) ammoCountSpinner.getValue();
            if (currentAmmoCount > 0) {
                ammoCountSpinner.setValue(currentAmmoCount - 1);
             } else {
                btnLaserOperation.setEnabled(false);
             }    
    }//GEN-LAST:event_btnLaserOperationActionPerformed

    private void chckPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chckPositionActionPerformed
     
    private void btnHelicopterSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelicopterSendActionPerformed
            m1.setMassage("Helicopter : "+txtHelicopter.getText());
            txtHelicopter.setText("");
    }//GEN-LAST:event_btnHelicopterSendActionPerformed

    private void soldierCountSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_soldierCountSpinnerStateChanged

    }//GEN-LAST:event_soldierCountSpinnerStateChanged

    private void ammoCountSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ammoCountSpinnerStateChanged
  
    }//GEN-LAST:event_ammoCountSpinnerStateChanged

    private void btnMissileOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMissileOperationActionPerformed
         int currentAmmoCount = (int) ammoCountSpinner.getValue();
            if (currentAmmoCount > 0) {
                ammoCountSpinner.setValue(currentAmmoCount - 1);
             } else {
                btnMissileOperation.setEnabled(false);
             }    
    }//GEN-LAST:event_btnMissileOperationActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AreaClearjLabel1;
    private javax.swing.JLabel ammoCount;
    private javax.swing.JSpinner ammoCountSpinner;
    private javax.swing.JButton btnHelicopterSend;
    private javax.swing.JButton btnLaserOperation;
    private javax.swing.JButton btnMissileOperation;
    private javax.swing.JButton btnShoot;
    private javax.swing.JCheckBox chckPosition;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JLabel soldierCount;
    private javax.swing.JSpinner soldierCountSpinner;
    private javax.swing.JTextArea txtAreaHelicopter;
    private javax.swing.JTextField txtHelicopter;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setValue(String value) {
        if(value.equals("Area Cleared")){
            AreaClearjLabel1.setText(value);
            AreaClearjLabel1.setForeground(Color.BLACK);
        }else{
             AreaClearjLabel1.setText(value);
            AreaClearjLabel1.setForeground(Color.RED);
        }
    }

    @Override
    public void setMessage(String message) {
        if(message!=null){
          txtAreaHelicopter.append(message+"\n");
        }
    }

    @Override
    public void setPrivate(String message, int index) {
        if(index==1){
           txtAreaHelicopter.append(message+"\n");
        }
  }

    @Override
   public void Strength(int strength) {
       Slider sliderValue = Slider.values()[strength];
        if (chckPosition.isSelected()) {
          switch (sliderValue) {
                case LOW:
                    btnShoot.setEnabled(false);
                    btnMissileOperation.setEnabled(false);
                    btnLaserOperation.setEnabled(false);
                    break;
                case MEDIUM:
                    btnShoot.setEnabled(true);
                    btnMissileOperation.setEnabled(false);
                    btnLaserOperation.setEnabled(false);
                    break;
                case HIGH:
                    btnShoot.setEnabled(true);
                    btnMissileOperation.setEnabled(true);
                    btnLaserOperation.setEnabled(false);
                    break;
                case STRONG:
                    btnShoot.setEnabled(true);
                    btnMissileOperation.setEnabled(true);
                    btnLaserOperation.setEnabled(true);
                    break;
                case COLOSED:
                default:
                    btnShoot.setEnabled(false);
                    btnMissileOperation.setEnabled(false);
                    btnLaserOperation.setEnabled(false);
                    break;
            }
        } else {
            btnShoot.setEnabled(false);
            btnMissileOperation.setEnabled(false);
            btnLaserOperation.setEnabled(false);
        }
    
    }

    @Override
    public String[] setCount() {
       String[] ar ={soldierCountSpinner.getValue().toString(),ammoCountSpinner.getValue().toString(),Integer.toString(jSlider2.getValue())};
       return ar;
    }
}